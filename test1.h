#ifndef VECC_DEFINED
#define VECC_DEFINED 1

// WARNING: this file was generated by the VecC compiler.

#include <stdint.h>
#include <stdio.h>
#include <immintrin.h>
#ifdef __cplusplus
#else // __cplusplus
#define false 0
#define true 1
#endif // __cplusplus

// VECC type definitions
typedef int8_t bool8_t;
typedef int16_t bool16_t;
typedef int32_t bool32_t;
typedef int64_t bool64_t;
typedef struct Aos2_float { float data[2]; } Aos2_float;
static Aos2_float aos2_float_add(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_sub(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_mul(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_div(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_neg(Aos2_float a);
typedef struct Enemy {
	float health;
	int32_t ammo;
	Aos2_float foo;
} Enemy;

// VECC exported function declarations
void main_vecc();
#endif // VECC_DEFINED


#ifdef VECC_IMPL
// VECC private function declarations
static Aos2_float aos2_float_add(Aos2_float a, Aos2_float b) {
	Aos2_float result;
	result.data[0] = a.data[0] + b.data[0];
	result.data[1] = a.data[1] + b.data[1];
	return result;
}
static Aos2_float aos2_float_sub(Aos2_float a, Aos2_float b) {
	Aos2_float result;
	result.data[0] = a.data[0] - b.data[0];
	result.data[1] = a.data[1] - b.data[1];
	return result;
}
static Aos2_float aos2_float_mul(Aos2_float a, Aos2_float b) {
	Aos2_float result;
	result.data[0] = a.data[0] * b.data[0];
	result.data[1] = a.data[1] * b.data[1];
	return result;
}
static Aos2_float aos2_float_div(Aos2_float a, Aos2_float b) {
	Aos2_float result;
	result.data[0] = a.data[0] / b.data[0];
	result.data[1] = a.data[1] / b.data[1];
	return result;
}
static Aos2_float aos2_float_neg(Aos2_float a) {
	a.data[0] = -a.data[0];
	a.data[1] = -a.data[1];
}
static int32_t bar(int32_t a);

// VECC global variable declarations

// VECC function definitions
static int32_t bar(int32_t a) {
	for (int64_t i = 0; i < (int64_t)16; i += (int64_t)1) {
		a += (int32_t)i;
	};
	bool8_t x = false;
	x = !x;
	if (x) {
		a = -a + 1;
	};
	if (a > 100) {
		a += 2;
	} else {
		const int32_t b = a / 2;
		return a + b;
	};
	return a;
}

void main_vecc() {
	Enemy enemy = {0};
	enemy.health = 2.0f;
	enemy.foo[0] = 123.0f;
	enemy.foo[1] = 66.0f;
}

#endif // VECC_IMPL