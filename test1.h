#pragma once

// WARNING: this file has been generated by the vecc compiler.

#include <stdint.h>
#include <stdio.h>
#include <immintrin.h>

// VECC built-in type definitions

typedef int32_t i32;
typedef int64_t i64;
typedef float f32;
typedef __m128  v4f32;
typedef __m128i v4i32;
typedef __m256  v8f32;
typedef __m256i v8i32;

#ifdef VECC_IMPL

// VECC function declarations

static void print_v4f32(v4f32 x);
static void print_v8f32(v8f32 x);
static void print_v4i32(v4i32 x);
static void print_v8i32(v8i32 x);
static void println_v4f32(v4f32 x);
static void println_v8f32(v8f32 x);
static void println_v4i32(v4i32 x);
static void println_v8i32(v8i32 x);
static f32 reduce_sum_v4f32(v4f32 x);
static f32 reduce_sum_v8f32(v8f32 x);
static void vecc_main();

// VECC function definitions

static void print_v4f32(v4f32 x) {
	printf("{");
	i32 val = 0;
	val = _mm_extract_ps(x, 0);
	printf("%f, ", (*(f32*)&val));
	val = _mm_extract_ps(x, 1);
	printf("%f, ", (*(f32*)&val));
	val = _mm_extract_ps(x, 2);
	printf("%f, ", (*(f32*)&val));
	val = _mm_extract_ps(x, 3);
	printf("%f", (*(f32*)&val));
	printf("}");
}

static void print_v8f32(v8f32 x) {
	printf("{");
	print_v4f32(_mm256_extractf128_ps(x, 0));
	printf(", ");
	print_v4f32(_mm256_extractf128_ps(x, 1));
	printf("}");
}

static void print_v4i32(v4i32 x) {
	printf("{");
	i32 val = 0;
	val = _mm_extract_epi32(x, 0);
	printf("%i, ", (*(i32*)&val));
	val = _mm_extract_epi32(x, 1);
	printf("%i, ", (*(i32*)&val));
	val = _mm_extract_epi32(x, 2);
	printf("%i, ", (*(i32*)&val));
	val = _mm_extract_epi32(x, 3);
	printf("%i", (*(i32*)&val));
	printf("}");
}

static void print_v8i32(v8i32 x) {
	printf("{");
	print_v4i32(_mm256_extractf128_si256(x, 0));
	printf(", ");
	print_v4i32(_mm256_extractf128_si256(x, 1));
	printf("}");
}

static void println_v4f32(v4f32 x) {
	print_v4f32(x);
	printf("\n");
}

static void println_v8f32(v8f32 x) {
	print_v8f32(x);
	printf("\n");
}

static void println_v4i32(v4i32 x) {
	print_v4i32(x);
	printf("\n");
}

static void println_v8i32(v8i32 x) {
	print_v8i32(x);
	printf("\n");
}

static f32 reduce_sum_v4f32(v4f32 x) {
	v4f32 sums = _mm_add_ps(x, _mm_movehl_ps(x, x));
	v4f32 shuf = _mm_movehdup_ps(sums);
	return _mm_cvtss_f32(_mm_add_ss(sums, shuf));
}

static f32 reduce_sum_v8f32(v8f32 x) {
	return reduce_sum_v4f32(_mm_add_ps(_mm256_castps256_ps128(x), _mm256_extractf128_ps(x, 1)));
}

static void vecc_main() {
	v8f32 sum_lanes = _mm256_setzero_ps();
	{ // range i
		i64 i = 0;
		i64 vecc_i_end = 8;
		v8i32 vecc_mask = _mm256_set1_epi32(0xffffffff);
		for (;i < vecc_i_end - 7; i += 8) {
			__m256i vecc_i = _mm256_add_epi32(
				_mm256_set1_epi32(i),
				_mm256_set_epi32(7, 6, 5, 4, 3, 2, 1, 0));
			{
				printf("%lli\n", i);
			};
			{ // if
				v8i32 vecc_prevmask = vecc_mask;
				vecc_mask = _mm256_and_si256(vecc_mask, _mm256_cmpeq_epi32(_mm256_and_si256(vecc_i, _mm256_set1_epi32(1)), _mm256_setzero_si256()));
				{
					sum_lanes = _mm256_blendv_ps(sum_lanes, _mm256_add_ps(sum_lanes, _mm256_set1_ps(1.0)), _mm256_castsi256_ps(vecc_mask));
				}
				vecc_mask = vecc_prevmask;
			}
;
			sum_lanes = _mm256_blendv_ps(sum_lanes, _mm256_add_ps(sum_lanes, _mm256_set1_ps(1.0)), _mm256_castsi256_ps(vecc_mask));
		}
	};
	println_v8f32(sum_lanes);
	printf("reduce sum: %f\n", reduce_sum_v8f32(sum_lanes));
}

#endif // VECC_IMPL
