#ifndef VECC_DEFINED
#define VECC_DEFINED 1

// WARNING: this file was generated by the VecC compiler.

#include <stdint.h>
#include <stdio.h>
#include <immintrin.h>
#ifdef __cplusplus
#else // __cplusplus
#define false 0
#define true 1
#endif // __cplusplus

// VECC type definitions
typedef int8_t bool8_t;
typedef int16_t bool16_t;
typedef int32_t bool32_t;
typedef int64_t bool64_t;
static __m256i __m256i_eq(__m256i a, __m256i b);
static __m256i __m256i_lt(__m256i a, __m256i b);
static __m256i __m256i_le(__m256i a, __m256i b);
static __m256i __m256i_gt(__m256i a, __m256i b);
static __m256i __m256i_ge(__m256i a, __m256i b);
static __m256i __m256i_neq(__m256i a, __m256i b);
static __m256i __m256i_add(__m256i a, __m256i b);
static __m256i __m256i_sub(__m256i a, __m256i b);
static __m256i __m256i_mul(__m256i a, __m256i b);
static __m256i __m256i_div(__m256i a, __m256i b);
static __m256i __m256i_mod(__m256i a, __m256i b);
static __m256i __m256i_and(__m256i a, __m256i b);
static __m256i __m256i_or(__m256i a, __m256i b);
static __m256i __m256i_xor(__m256i a, __m256i b);
static __m256i __m256i_shl(__m256i a, __m256i b);
static __m256i __m256i_shr(__m256i a, __m256i b);
static __m256i __m256i_broadcast(int32_t a);
typedef struct Aos4_uint8_t { uint8_t data[4]; } Aos4_uint8_t;
static Aos4_uint8_t aos4_uint8_t_eq(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_lt(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_le(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_gt(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_ge(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_neq(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_add(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_sub(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_mul(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_div(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_mod(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_and(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_or(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_xor(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_shl(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_shr(Aos4_uint8_t a, Aos4_uint8_t b);
static Aos4_uint8_t aos4_uint8_t_broadcast(uint8_t a);
typedef struct Aos2_int32_t { int32_t data[2]; } Aos2_int32_t;
static Aos2_int32_t aos2_int32_t_eq(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_lt(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_le(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_gt(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_ge(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_neq(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_add(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_sub(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_mul(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_div(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_mod(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_and(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_or(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_xor(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_shl(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_shr(Aos2_int32_t a, Aos2_int32_t b);
static Aos2_int32_t aos2_int32_t_broadcast(int32_t a);
typedef struct Aos2_float { float data[2]; } Aos2_float;
static Aos2_float aos2_float_eq(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_lt(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_le(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_gt(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_ge(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_neq(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_add(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_sub(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_mul(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_div(Aos2_float a, Aos2_float b);
static Aos2_float aos2_float_broadcast(float a);
static __m256 __m256_eq(__m256 a, __m256 b);
static __m256 __m256_lt(__m256 a, __m256 b);
static __m256 __m256_le(__m256 a, __m256 b);
static __m256 __m256_gt(__m256 a, __m256 b);
static __m256 __m256_ge(__m256 a, __m256 b);
static __m256 __m256_neq(__m256 a, __m256 b);
static __m256 __m256_add(__m256 a, __m256 b);
static __m256 __m256_sub(__m256 a, __m256 b);
static __m256 __m256_mul(__m256 a, __m256 b);
static __m256 __m256_div(__m256 a, __m256 b);
static __m256 __m256_broadcast(float a);
typedef struct Aos2___m256 { __m256 data[2]; } Aos2___m256;
static Aos2___m256 aos2___m256_eq(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_lt(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_le(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_gt(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_ge(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_neq(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_add(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_sub(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_mul(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_div(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_mod(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_and(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_or(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_xor(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_shl(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_shr(Aos2___m256 a, Aos2___m256 b);
static Aos2___m256 aos2___m256_broadcast(__m256 a);

// VECC exported function declarations
void compute_frame(Aos4_uint8_t* framebuffer, Aos2_int32_t resolution, float time, float delta, int32_t frame);
#endif // VECC_DEFINED


#ifdef VECC_IMPL

// VECC private function declarations

static __m256i __m256i_broadcast(int32_t a) {
	return _mm256_set1_epi32(a);
}
static Aos4_uint8_t aos4_uint8_t_broadcast(uint8_t a) {
	Aos4_uint8_t result;
	result.data[0] = a;
	result.data[1] = a;
	result.data[2] = a;
	result.data[3] = a;
}
static Aos2_int32_t aos2_int32_t_broadcast(int32_t a) {
	Aos2_int32_t result;
	result.data[0] = a;
	result.data[1] = a;
}
static Aos2_float aos2_float_broadcast(float a) {
	Aos2_float result;
	result.data[0] = a;
	result.data[1] = a;
}
static __m256 __m256_broadcast(float a) {
	return _mm256_set1_ps(a);
}
static Aos2___m256 aos2___m256_broadcast(__m256 a) {
	Aos2___m256 result;
	result.data[0] = a;
	result.data[1] = a;
}

// VECC global variable declarations

const int32_t W = 8;
const int32_t vector_width = 8;
const __m256i vector_index = _mm256_set_epi32(7, 6, 5, 4, 3, 2, 1, 0);

// VECC function definitions

void compute_frame(Aos4_uint8_t* framebuffer, Aos2_int32_t resolution, float time, float delta, int32_t frame) {
	for (int32_t y = 0; y < resolution.data[1]; y += 1) {
		for (int32_t x = 0; x < resolution.data[0]; x += vector_width) {
			const int32_t index = x + (y * resolution.data[0]);
			Aos2___m256 uv = {0};
			uv.data[0] = __m256_broadcast(0.5f);
		};
	};
}

#endif // VECC_IMPL
