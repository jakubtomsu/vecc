// const vector INDEX i32 = vector_index

const W i32 = 8

procedure export compute_frame (
    immut vector framebuffer    [^]u32
    immut resolution            [2]i32
    immut time                  f32
    immut delta                 f32
    immut frame                 i32
) {
    for y i32; y < resolution.y; y += 1 {
        for x i32; x < (resolution.x / vector_width); x += 1 {
            mut vector pixel_x i32 = (vector_index * 1) + (x * vector_width)

            mut vector uv [2]f32
            uv.x = conv(f32, pixel_x) / conv(f32, resolution.x)
            uv.y = conv(f32, y) / conv(f32, resolution.y)

            mut vector col [4]f32
            col.r = uv.x
            col.g = uv.y
            col.a = 1.0

            // Store

            mut vector col_int [4]u32
            col_int.r = min(conv(vector(8, u32), 0xff), conv(u32, col.r * 255.0))
            col_int.g = min(conv(vector(8, u32), 0xff), conv(u32, col.g * 255.0))
            col_int.b = min(conv(vector(8, u32), 0xff), conv(u32, col.b * 255.0))
            col_int.a = min(conv(vector(8, u32), 0xff), conv(u32, col.a * 255.0))

            mut vector col_rgba u32
            col_rgba = col_int.b
            col_rgba |= col_int.g << 8
            col_rgba |= col_int.r << 16
            col_rgba |= col_int.a << 24

            immut index i32 = x + (y * (resolution.x / vector_width))
            framebuffer[index] = col_rgba
        }
    }
}