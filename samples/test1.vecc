// test1 module {
//
// }
//
// GLOBAL_CONST i32 = 69
// global_var i32 = 1

// bar proc() {
//     asdf i32 = 0x1234
//     @println(asdf)
// }
//
// // foo proc(a *i32) f32 {
// foo proc() {
//     a i32 = 1
//     b i32 = 2 + a
//     b = b * 2
//     a = a + b
//     c f32 = 123.123123123;
//     if a > 10 {
//         a = a + 1000
//         if b > 10 {
//             a = a + 69
//         }
//     }
//
//     {
//         x i32 = 1111
//         @println(x)
//     }
//
//     // for i; i < 10; i++ {
//     //     b = b + 2
//     // }
//
//     @println(a)
//     @println(b)
// }

// temp boilerplate

// print_v4f32 proc(x f32) {
//     printf("{")
//     val i32
//     val = _mm_extract_ps(x, 0); printf("%f, ", reinterpret(f32, val))
//     val = _mm_extract_ps(x, 1); printf("%f, ", reinterpret(f32, val))
//     val = _mm_extract_ps(x, 2); printf("%f, ", reinterpret(f32, val))
//     val = _mm_extract_ps(x, 3); printf("%f"  , reinterpret(f32, val))
//     printf("}")
// }
//
// print_v8f32 proc(x v8f32) {
//     printf("{")
//     print_v4f32(_mm256_extractf128_ps(x, 0))
//     printf(", ")
//     print_v4f32(_mm256_extractf128_ps(x, 1))
//     printf("}")
// }
//
// print_v4i32 proc(x v4i32) {
//     printf("{")
//     val i32
//     val = _mm_extract_epi32(x, 0); printf("%i, ", reinterpret(i32, val))
//     val = _mm_extract_epi32(x, 1); printf("%i, ", reinterpret(i32, val))
//     val = _mm_extract_epi32(x, 2); printf("%i, ", reinterpret(i32, val))
//     val = _mm_extract_epi32(x, 3); printf("%i"  , reinterpret(i32, val))
//     printf("}")
// }
//
// print_v8i32 proc(x v8i32) {
//     printf("{")
//     print_v4i32(_mm256_extractf128_si256(x, 0))
//     printf(", ")
//     print_v4i32(_mm256_extractf128_si256(x, 1))
//     printf("}")
// }
//
// println_v4f32 proc(x v4f32) {
//     print_v4f32(x)
//     printf("\n");
// }
//
// println_v8f32 proc(x v8f32) {
//     print_v8f32(x)
//     printf("\n");
// }
//
// println_v4i32 proc(x v4i32) {
//     print_v4i32(x)
//     printf("\n");
// }
//
// println_v8i32 proc(x v8i32) {
//     print_v8i32(x)
//     printf("\n");
// }
//
// reduce_sum_v4f32 proc(x v4f32) f32 {
//     sums v4f32 = _mm_add_ps(x, _mm_movehl_ps(x, x))
//     shuf v4f32 = _mm_movehdup_ps(sums)
//     return _mm_cvtss_f32(_mm_add_ss(sums, shuf))
// }
//
// reduce_sum_v8f32 proc(x v8f32) f32 {
//     return reduce_sum_v4f32(_mm_add_ps(
//         _mm256_castps256_ps128(x),
//         _mm256_extractf128_ps(x, 1),
//     ))
// }

// https://www.intel.com/content/www/us/en/developer/articles/technical/simd-made-easy-with-intel-ispc.html

// procedure bar (mut a i32) i32 {
//     for i i64; i < conv(i64, 16); i += conv(i64, 1) {
//         a += conv(i32, i)
//     }

//     mut x bool = false
//     x = !x

//     if x {
//         a = -a + 1
//     }

//     if a > 100 {
//         a += 2
//     } else {
//         immut b i32 = a / 2
//         return a + b
//     }

//     return a
// }

struct Enemy {
    pos     [2]f32
    health  f32
    ammo    i32
}

procedure deal_damage (
    immut enemy ^Enemy
    immut damage f32 = 1.0
) {
    enemy.health -= damage
}

const CONSTANT i32 = 123
const FOO f32 = 1.2

procedure export main_vecc () {
    // mut i32 x = bar(bar(1))
    // mut [8]f32 a
    // mut [8]f32 b
    // mut [8]f32 c = a + b
    mut enemy Enemy
    enemy.health = FOO
    enemy.ammo = 1
    enemy.pos.x = 123.0
    enemy.pos.y = 1.0
    deal_damage(&enemy, 2.0)
}